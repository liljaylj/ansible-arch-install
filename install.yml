# vim: ft=yaml.ansible
---

- hosts: local
  tasks:

    - name: check if we booted to archiso
      ansible.builtin.fail:
        msg: not an archiso
      failed_when: ansible_facts.cmdline.archisobasedir is not defined

    - name: check if system is booted in UEFI mode
      ansible.builtin.stat:
        path: /sys/firmware/efi/efivars
      register: efivars_result
      failed_when: not (efivars_result.stat.isdir is defined and efivars_result.stat.isdir)

    - name: enable ntp
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          set -Eeuo pipefail
          if timedatectl status | grep -Eq 'NTP.+inactive'
          then
            timedatectl set-ntp true
            echo 'set-ntp-success'
          fi
      register: set_ntp_result
      changed_when: '"set-ntp-success" in set_ntp_result.stdout'

    - name: apply mirrorlist
      ansible.builtin.template:
        src: 'mirrorlist.j2'
        dest: '/etc/pacman.d/mirrorlist'
        mode: '644'

    - name: ensure pacman conf.d dir exists
      ansible.builtin.file:
        path: '/etc/pacman.d/conf.d'
        state: directory
        mode: '755'

    - name: import chaotic pacman key
      community.general.pacman_key:
        id: 'A3873AB27021C5DD39E0501AFBA220DFC880C036'
        keyserver: 'keyserver.ubuntu.com'

    - name: install chaotic mirrorlist and keyring
      ansible.builtin.pacman:
        name:
          - 'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-keyring.pkg.tar.zst'
          - 'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-mirrorlist.pkg.tar.zst'

    - name: apply pacman conf.d
      ansible.builtin.template:
        src: '{{ item }}'
        dest: '/etc/pacman.d/conf.d/{{ item | splitext | first }}'
        mode: '644'
      with_items:
        - 10-options.conf.j2
        - 20-multilib.conf.j2
        - 50-chaotic.conf.j2

    - name: include conf.d to pacman.conf
      ansible.builtin.lineinfile:
        path: '/etc/pacman.conf'
        line: 'Include = /etc/pacman.d/conf.d/*.conf'

    - name: sync package databases
      ansible.builtin.pacman:
        update_cache: true

    - name: pacstrap
      vars:
        packages:
          - base
          - base-devel
          - iptables-nft
          - linux-firmware
          - efibootmgr
          - networkmanager
          - polkit
          - grub  # TODO: depend on variable
          - terminus-font
          - man-db
          - man-pages
          - ansible
          - python-pip
          - git
          - neovim
          - zsh
          - exfat-utils
          - reflector
          - tmux
          - paru
          - chaotic-keyring
          - chaotic-mirrorlist
          - '{{ archinstall.btrfs | default(false) | ternary("btrfs-progs", None) }}'
          - '{{ archinstall.swap | default(true) | ternary("zram-generator", None) }}'
      ansible.builtin.command:
        argv: '{{ ["pacstrap", archinstall.target] | union(packages) |
          union(archinstall.kernels | to_kernel_list | map("kernel_package")) |
          union([archinstall.pacstrap_packages] | flatten | default([])) }}'
        creates: '{{ [archinstall.target, "usr/bin/bash"] | path_join }}'

    - name: generate fstab
      ansible.builtin.shell:
        executable: 'zsh'
        cmd: 'genfstab -U {{ archinstall.target }} >> {{ archinstall.target }}/etc/fstab'
      changed_when: false

- hosts: chroot
  tasks:
    - name: 'set time zone to {{ archinstall.timezone }}'
      ansible.builtin.file:
        src: '{{ ["/usr/share/zoneinfo", archinstall.timezone] | path_join }}'
        dest: '/etc/localtime'
        state: link

    - name: adjust clock to hardware clock
      ansible.builtin.command:
        cmd: 'hwclock --systohc'
        creates: '/etc/adjtime'

    - name: set locales
      ansible.builtin.copy:
        content: "{{ archinstall.locales | default(['en_US.UTF-8 UTF-8']) | join('\n') }}\n"
        dest: '/etc/locale.gen'
        mode: '644'

    - name: set locale lang
      ansible.builtin.lineinfile:
        regexp: '^ *LANG='
        line: "LANG={{ archinstall.locales | default(['en_US.UTF-8 UTF-8']) | first | trim | split | first }}\n"
        dest: '/etc/locale.conf'
        create: true
        mode: '644'

    - name: locale gen
      ansible.builtin.command:
        cmd: 'locale-gen'
        creates: '/usr/lib/locale/locale-archive'

    - name: set vconsole keyboard layout
      ansible.builtin.lineinfile:
        regexp: '^ *KEYMAP='
        line: 'KEYMAP={{ archinstall.vconsole.keymap | default("us") }}'
        dest: '/etc/vconsole.conf'
        create: true
        mode: '644'

    - name: set vconsole font
      ansible.builtin.lineinfile:
        regexp: '^ *FONT='
        line: 'FONT={{ archinstall.vconsole.font }}'
        dest: '/etc/vconsole.conf'
        create: true
        mode: '644'
      when: archinstall.vconsole.font is defined

    - name: define hostname
      ansible.builtin.copy:
        content: "{{ archinstall.hostname }}\n"
        dest: '/etc/hostname'
        mode: '644'

    - name: apply hosts
      ansible.builtin.template:
        src: 'hosts.j2'
        dest: '/etc/hosts'
        mode: '644'

    - name: enable periodic trim
      ansible.builtin.systemd:
        name: fstrim.timer
        enabled: true

    - name: apply mkinitcpio.conf
      ansible.builtin.template:
        src: 'mkinitcpio.conf.j2'
        dest: '/etc/mkinitcpio.conf'
        mode: '644'
      notify:
        - run mkinitcpio

    - name: zram swap
      ansible.builtin.ini_file:
        dest: '/etc/systemd/zram-generator.conf'
        section: 'zram0'
        allow_no_value: true
        mode: '644'
      when: archinstall.swap | default(true)

    - name: zram swap service
      ansible.builtin.systemd:
        name: 'systemd-zram-setup@zram0.service'
        daemon_reload: true
        enabled: true
      when: archinstall.swap | default(true)

    - name: set up grub
      when: archinstall.bootloader.grub | default(true)
      block:
        - name: install grub efi application
          ansible.builtin.command:
            cmd: 'grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB'
            creates: '/boot/grub/x86_64-efi/'
          notify:
            - generate grub configuration file

        - name: create .pacnew backup of grub options
          ansible.builtin.copy:
            src: '/etc/default/grub'
            dest: '/etc/default/grub.pacnew'
            mode: preserve
            remote_src: true
            force: false

        - name: apply grub options
          ansible.builtin.template:
            src: 'templates/grub.j2'
            dest: '/etc/default/grub'
            mode: '644'
          notify:
            - generate grub configuration file

    - name: set up systemd-boot
      when: not (archinstall.bootloader.grub | default(true))
      block:
        - name: install systemd-boot application
          ansible.builtin.command:
            cmd: 'bootctl --path=/boot install'
            creates: '/boot/EFI/systemd/systemd-bootx64.efi'

        - name: add bootloader entries
          ansible.builtin.template:
            src: 'templates/loader-entry.conf.j2'
            dest: '/boot/loader/entries/{{ item | kernel_package }}.conf'
            mode: '755'
          loop: '{{ archinstall.kernels | to_kernel_list }}'

        - name: add bootloader fallback entries
          ansible.builtin.template:
            src: 'templates/loader-entry.conf.j2'
            dest: '/boot/loader/entries/{{ item | kernel_package }}-fallback.conf'
            mode: '755'
          vars:
            fallback_entry: true
          loop: '{{ archinstall.kernels | to_kernel_list }}'

        - name: bootloader config
          ansible.builtin.template:
            src: 'templates/loader.conf.j2'
            dest: '/boot/loader/loader.conf'
            mode: '755'

    - name: enable networkmanager service
      ansible.builtin.systemd:
        name: 'NetworkManager.service'
        daemon_reload: true
        enabled: true

    - name: add wheel group to sudoers
      community.general.sudoers:
        name: wheel
        group: wheel
        nopassword: false
        runas: 'ALL:ALL'
        commands: ALL

    - name: add users
      ansible.builtin.user:
        name: '{{ item.name | mandatory }}'
        comment: '{{ item.comment | default(omit) }}'
        create_home: '{{ item.create_home | default(true) }}'
        home: '{{ item.home | default(omit) }}'
        groups: '{{ item.groups | default(omit) }}'
        password: '{{ item.password | mandatory }}'
        shell: '{{ item.shell | default(omit) }}'
        system: '{{ item.system | default(false) }}'
      loop: '{{ archinstall.users | default([]) }}'

  handlers:

    - name: run mkinitcpio
      ansible.builtin.command:
        cmd: 'mkinitcpio -P'

    - name: generate grub configuration file
      ansible.builtin.command:
        cmd: 'grub-mkconfig -o /boot/grub/grub.cfg'
