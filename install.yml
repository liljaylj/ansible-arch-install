# vim: ft=yaml.ansible
---

- hosts: local
  tasks:

    - name: check if we booted to archiso
      ansible.builtin.fail:
        msg: not an archiso
      failed_when: ansible_facts.cmdline.archisobasedir is not defined

    - name: check if system is booted in UEFI mode
      ansible.builtin.stat:
        path: /sys/firmware/efi/efivars
      register: efivars_result
      failed_when: not (efivars_result.stat.isdir is defined and efivars_result.stat.isdir)

    - name: enable ntp
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          set -Eeuo pipefail
          if timedatectl status | grep -Eq 'NTP.+inactive'
          then
            timedatectl set-ntp true
            echo 'set-ntp-success'
          fi
      register: set_ntp_result
      changed_when: '"set-ntp-success" in set_ntp_result.stdout'

    - name: enable multilib
      ansible.builtin.ini_file:
        path: /etc/pacman.conf
        section: multilib
        option: Include
        value: /etc/pacman.d/mirrorlist
        mode: '644'
      when: archinstall.multilib | default(false)

    - name: get mirrorlist file stat
      ansible.builtin.stat:
        path: /etc/pacman.d/mirrorlist
      register:
        pacman_mirrorlist_stat

    - name: update pacman mirrorlist
      ansible.builtin.command:
        cmd: 'reflector {{ archinstall.reflector.args | default("@/etc/xdg/reflector/reflector.conf") }}'
      changed_when: false
      when: 'archinstall.reflector is defined and archinstall.reflector and (ansible_facts.date_time.epoch | float -
        pacman_mirrorlist_stat.stat.mtime > archinstall.reflector.timeout_secs | default(300))'

    - name: sync package databases
      ansible.builtin.pacman:
        update_cache: true

    - name: pacstrap
      vars:
        packages:
          - base
          - iptables-nft
          - base-devel
          - linux-firmware
          - efibootmgr
          - '{{ archinstall.btrfs | default(false) | ternary("btrfs-progs", None) }}'
          - '{{ archinstall.swap | default(true) | ternary("zram-generator", None) }}'
      ansible.builtin.command:
        argv: '{{ ["pacstrap", archinstall.target] | union(packages) |
          union(archinstall.kernels | to_kernel_list | map("kernel_package")) |
          union([archinstall.pacstrap_packages] | flatten | default([])) |
          union([ansible_facts.processor | microcode_package]) }}'
        creates: '{{ [archinstall.target, "usr/bin/bash"] | path_join }}'

- hosts: chroot
  tasks:
    - name: 'set time zone to {{ archinstall.timezone }}'
      ansible.builtin.file:
        src: '{{ ["/usr/share/zoneinfo", archinstall.timezone] | path_join }}'
        dest: '/etc/localtime'
        state: link

    - name: adjust clock to hardware clock
      ansible.builtin.command:
        cmd: 'hwclock --systohc'
        creates: '/etc/adjtime'

    - name: set locales
      ansible.builtin.copy:
        content: "{{ archinstall.locales | default(['en_US.UTF-8 UTF-8']) | join('\n') }}\n"
        dest: '/etc/locale.gen'
        mode: '644'

    - name: locale gen
      ansible.builtin.command:
        cmd: 'locale-gen'
        creates: '/usr/lib/locale/locale-archive'

    - name: set locale lang
      ansible.builtin.lineinfile:
        regexp: '^ *LANG='
        line: "LANG={{ archinstall.locales | default(['en_US.UTF-8 UTF-8']) | first | trim | split | first }}\n"
        dest: '/etc/locale.conf'
        create: true
        mode: '644'

    - name: set vconsole keyboard layout
      ansible.builtin.lineinfile:
        regexp: '^ *KEYMAP='
        line: 'KEYMAP={{ archinstall.vconsole.keymap | default("us") }}'
        dest: '/etc/vconsole.conf'
        create: true
        mode: '644'

    - name: set vconsole font
      ansible.builtin.lineinfile:
        regexp: '^ *FONT='
        line: 'FONT={{ archinstall.vconsole.font }}'
        dest: '/etc/vconsole.conf'
        create: true
        mode: '644'
      when: archinstall.vconsole.font is defined

    - name: define hostname
      ansible.builtin.copy:
        content: "{{ archinstall.hostname }}\n"
        dest: '/etc/hostname'
        mode: '644'

    - name: enable periodic trim
      ansible.builtin.systemd:
        name: fstrim.timer
        enabled: true

    - name: set up mkinitcpio modules
      ansible.builtin.lineinfile:
        regexp: '^[#\s]*MODULES='
        line: 'MODULES=({{ [archinstall.mkinitcpio.modules | default("")] | flatten | join(" ") }})'
        dest: '/etc/mkinitcpio.conf'
        mode: '644'
      notify:
        - run mkinitcpio

    - name: set up mkinitcpio binaries
      ansible.builtin.lineinfile:
        regexp: '^[#\s]*BINARIES='
        line: 'BINARIES=({{ [archinstall.mkinitcpio.binaries | default("")] | flatten | join(" ") }})'
        dest: '/etc/mkinitcpio.conf'
        mode: '644'
      notify:
        - run mkinitcpio

    - name: set up mkinitcpio files
      ansible.builtin.lineinfile:
        regexp: '^[#\s]*FILES='
        line: 'FILES=({{ [archinstall.mkinitcpio.files | default("")] | flatten | join(" ") }})'
        dest: '/etc/mkinitcpio.conf'
        mode: '644'
      notify:
        - run mkinitcpio

    - name: set up mkinitcpio hooks
      ansible.builtin.lineinfile:
        regexp: '^[#\s]*HOOKS='
        line: 'HOOKS=({{ [archinstall.mkinitcpio.hooks |
          default("base consolefont udev autodetect modconf block filesystems keyboard fsck")] |
          flatten | join(" ") }})'
        dest: '/etc/mkinitcpio.conf'
        mode: '644'
      notify:
        - run mkinitcpio

    - name: set up mkinitcpio compression
      ansible.builtin.lineinfile:
        regexp: '^[#\s]*COMPRESSION="{{ archinstall.mkinitcpio.compression | default("zstd") }}"'
        line: 'COMPRESSION="{{ archinstall.mkinitcpio.compression | default("zstd") }}"'
        dest: '/etc/mkinitcpio.conf'
        mode: '644'
      notify:
        - run mkinitcpio

    - name: zram swap
      ansible.builtin.ini_file:
        dest: '/etc/systemd/zram-generator.conf'
        section: 'zram0'
        allow_no_value: true
        mode: '644'
      when: archinstall.swap | default(true)

    - name: zram swap service
      ansible.builtin.systemd:
        name: 'systemd-zram-setup@zram0.service'
        daemon_reload: true
        enabled: true
      when: archinstall.swap | default(true)

    - name: install systemd-boot
      ansible.builtin.command:
        cmd: 'bootctl --path=/boot install'
        creates: '/boot/EFI/systemd/systemd-bootx64.efi'

    - name: add bootloader entries
      ansible.builtin.template:
        src: 'templates/loader-entry.conf.j2'
        dest: '/boot/loader/entries/{{ item | kernel_package }}.conf'
        mode: '755'
      loop: '{{ archinstall.kernels | to_kernel_list }}'

    - name: add bootloader fallback entries
      ansible.builtin.template:
        src: 'templates/loader-entry.conf.j2'
        dest: '/boot/loader/entries/{{ item | kernel_package }}-fallback.conf'
        mode: '755'
      vars:
        fallback_entry: true
      loop: '{{ archinstall.kernels | to_kernel_list }}'

    - name: bootloader config
      ansible.builtin.template:
        src: 'templates/loader.conf.j2'
        dest: '/boot/loader/loader.conf'
        mode: '755'

    - name: enable networkmanager service
      ansible.builtin.systemd:
        name: 'NetworkManager.service'
        daemon_reload: true
        enabled: true

  handlers:

    - name: run mkinitcpio
      ansible.builtin.command:
        cmd: 'mkinitcpio -P'

  #   - paru
