# vim: ft=yaml.ansible
---

- hosts: local
  tasks:
    - name: check if we booted to archiso
      ansible.builtin.fail:
        msg: not an archiso
      failed_when: ansible_facts.cmdline.archisobasedir is not defined

    - name: check if system is booted in UEFI mode
      ansible.builtin.stat:
        path: /sys/firmware/efi/efivars
      register: efivars_result
      failed_when: not (efivars_result.stat.isdir is defined and efivars_result.stat.isdir)

    - name: enable ntp
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          set -Eeuo pipefail
          if timedatectl status | grep -Eq 'NTP.+inactive'
          then
            timedatectl set-ntp true
            echo 'set-ntp-success'
          fi
      register: set_ntp_result
      changed_when: '"set-ntp-success" in set_ntp_result.stdout'

    - name: enable multilib
      ansible.builtin.ini_file:
        path: /etc/pacman.conf
        section: multilib
        option: Include
        value: /etc/pacman.d/mirrorlist
        mode: '644'
      when: archinstall.multilib | default(false)

    - name: get mirrorlist file stat
      ansible.builtin.stat:
        path: /etc/pacman.d/mirrorlist
      register:
        pacman_mirrorlist_stat

    - name: update pacman mirrorlist
      ansible.builtin.command:
        cmd: 'reflector {{ archinstall.reflector.args | default("@/etc/xdg/reflector/reflector.conf") }}'
      changed_when: false
      when: 'archinstall.reflector is defined and archinstall.reflector and (ansible_facts.date_time.epoch | float -
        pacman_mirrorlist_stat.stat.mtime > archinstall.reflector.timeout_secs | default(300))'

    - name: sync package databases
      ansible.builtin.pacman:
        update_cache: true

    - name: pacstrap
      vars:
        packages:
          - base
          - base-devel
          - linux-firmware
          - efibootmgr
          - '{{ archinstall.btrfs | default(false) | ternary("btrfs-progs", None) }}'
          - '{{ archinstall.swap | default(true) | ternary("zram-generator", None) }}'
      ansible.builtin.command:
        argv: '{{ ["pacstrap", archinstall.target] | union(packages) |
          union(archinstall.pacstrap_packages | default([])) |
          union(ansible_facts.processor | microcode_packages) }}'
        creates: '{{ [archinstall.target, "usr/bin/bash"] | path_join }}'

- hosts: chroot
  tasks:
    - name: 'set time zone to {{ archinstall.timezone }}'
      ansible.builtin.file:
        src: '{{ ["/usr/share/zoneinfo", archinstall.timezone] | path_join }}'
        dest: '/etc/localtime'
        state: link

    - name: adjust clock to hardware clock
      ansible.builtin.command:
        cmd: 'hwclock --systohc'
        creates: '/etc/adjtime'

    - name: set locales
      ansible.builtin.copy:
        content: "{{ archinstall.locales | default(['en_US.UTF-8 UTF-8']) | join('\n') }}\n"
        dest: '/etc/locale.gen'
        mode: '644'

    - name: locale gen
      ansible.builtin.command:
        cmd: 'locale-gen'
        creates: '/usr/lib/locale/locale-archive'

    - name: set locale lang
      ansible.builtin.copy:
        content: "LANG={{ archinstall.locales | default(['en_US.UTF-8 UTF-8']) | first | trim | split | first }}\n"
        dest: '/etc/locale.conf'
        mode: '644'

  #   - paru
